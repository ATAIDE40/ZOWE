name: Zowe CLI
'on':
  push:
    paths-ignore:
      - zowex/**
      - .github/workflows/rust-cli*.yml
  pull_request:
    paths-ignore:
      - zowex/**
      - .github/workflows/rust-cli*.yml
  workflow_dispatch:
    inputs:
      binary-type:
        description: Specify whether to use a `debug` or a `release` version of the binary
        default: debug
        required: false
jobs:
  prebuild:
    name: Build Linux
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    if: '(github.event_name == ''push'' || github.event.pull_request.head.repo.full_name != github.repository) && !contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        if: (!github.event.run_with_act)
        id: install-rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install Rust toolchain
        if: github.event.run_with_act
        run: |
          yum install cargo -y
          cargo --version
      - name: Build
        run: 'cargo build --verbose ${{ github.event.inputs.binary-type == ''release'' && ''--release'' || '''' }} --manifest-path=zowex/Cargo.toml'
      - name: Create Archive
        run: 'tar -cvzf zowe.tgz -C zowex/target/${{ github.event.inputs.binary-type == ''release'' && ''release'' || ''debug'' }} zowe'
      - name: Upload the Prebuilt Linux Binary
        if: (!github.event.run_with_act)
        uses: actions/upload-artifact@v2
        with:
          name: zowe-linux-latest.tgz
          path: zowe.tgz
      - name: Upload the Prebuilt Linux Binary
        if: (github.event.run_with_act)
        run: mkdir -p /toolcache/artifacts && cp zowe.tgz /toolcache/artifacts/zowe-linux-latest.tgz
  test:
    name: Cross-Platform Test
    runs-on: '${{ matrix.os }}'
    needs: prebuild
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16.x
        os:
          - ubuntu-latest
    env:
      OS: '${{ matrix.os }}'
      NODE: '${{ matrix.node-version }}'
      NODE_OPTIONS: '--max_old_space_size=4096'
    if: '(github.event_name == ''push'' || github.event.pull_request.head.repo.full_name != github.repository) && !contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: 'Use Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v2
        with:
          node-version: '${{ matrix.node-version }}'
      - name: Get NPM Version
        id: npm-version
        run: 'echo "::set-output name=number::$(npm --version)"'
      - name: Use NPM v8
        id: npm8
        run: npm install -g npm@^8
      - name: Install Node Package Dependencies
        id: install
        run: npm ci
      - name: Use Original NPM Version
        id: original-npm-version
        run: 'npm install -g npm@${{ steps.npm-version.outputs.number }}'
      - name: Build Source
        id: build
        run: npm run build --if-present
      - name: Build Windows Binary
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --verbose ${{ github.event.inputs.binary-type == 'release' && '--release' || '' }} --manifest-path=zowex/Cargo.toml
          tar -cvzf zowe.tgz -C zowex/target/${{ github.event.inputs.binary-type == 'release' && 'release' || 'debug' }}  zowe.exe
      - name: Build MacOS Binary
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --verbose ${{ github.event.inputs.binary-type == 'release' && '--release' || '' }} --manifest-path=zowex/Cargo.toml
          tar -cvzf zowe.tgz -C zowex/target/${{ github.event.inputs.binary-type == 'release' && 'release' || 'debug' }}  zowe
      - name: Download Prebuilt Linux Binary
        if: matrix.os == 'ubuntu-latest' && !github.event.run_with_act
        uses: actions/download-artifact@v2
        with:
          name: zowe-linux-latest.tgz
      - name: Download Prebuilt Linux Binary
        if: matrix.os == 'ubuntu-latest' && github.event.run_with_act
        run: cp /toolcache/artifacts/zowe-linux-latest.tgz zowe.tgz
      - name: Archive Binary
        if: matrix.os != 'ubuntu-latest'
        id: upload-binary
        uses: actions/upload-artifact@v2
        with:
          name: 'zowe-${{ matrix.os }}.tgz'
          path: zowe.tgz
      - name: Setup Binary in PATH
        id: setup-binary
        run: tar -xvzf zowe.tgz -C ./node_modules/.bin --overwrite
      - name: Unit Tests
        id: unit
        if: '${{ always() && steps.build.outcome == ''success'' }} || github.event.run_with_act'
        run: 'npm run test:unit >> unit-tests.txt'
      - name: Integration Tests
        id: integration
        if: '${{ always() && steps.build.outcome == ''success'' }} || github.event.run_with_act'
        run: 'npm run test:integration >> integration-tests.txt'
      - name: Archive Results
        id: upload
        if: '${{ always() && steps.build.outcome == ''success'' }} && !github.event.run_with_act'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ matrix.os }}-${{ matrix.node-version }}-results'
          path: |
            __tests__/__results__/
            unit-tests.txt
            integration-tests.txt
      - name: Upload Results to Codecov
        if: '${{ always() && steps.build.outcome == ''success'' }} && !github.event.run_with_act'
        uses: codecov/codecov-action@v1.0.7
        with:
          env_vars: 'OS,NODE'
